### reduces saturation on a per-pixel basis to fit into RGB-range [0.0 ... 1.0] ("pseudo-gamut")
# desaturation factor positive gamut overshoot
# math
#                 ( max ( (image - 1.0), 0.0)     // 1.0 = rgb positive max values. so "image - 1.0" is the over-gamut amount
# k_pos = 1 - max (-------------------------)     // desaturate_oog_positive
#                 (    image - gray_image   )     // gray image can also be "tinted" or whitepoint-tinted
# 
# "image-math"
#                       ( rgb_clip_low ( (image - 1.0), 0.0)
# k_pos = 1 - HSV_Value (-------------------------------------)     // desaturate_oog_positive
#                       (          image - gray_image         )
#
# 
# desaturation factor negative gamut overshoot
# math
#
#         (          gray_image              )
# k_neg = (----------------------------------)     // desaturate_oog_negative
#         (   gray_image - min (image, 0.0)  )     // so min "(image, 0.0)" is the negative amount of the rgb channel
# 
# "image-math"
#
#                     (                gray_image                    )
# k_neg = - HSV_Value (- --------------------------------------------)     // desaturate_oog_negative
#                     (    gray_image - rgb_clip_high (image, 0.0)   )
# 
# after that min of k_neg and k_pos defines the final factor for desaturating the image to fit "in gamut"/ RGB [0...1]
###

id=in # reference to input buffer


### desaturate out-of-gamut negative RGB values < 0.0
rgb-clip clip-high=true high-limit=0.0 clip-low=false
id=clip_neg

ref=in
saturation scale=0
id=gray

subtract aux=[ ref=clip_neg ]
id=overcolor_neg

ref=gray
divide aux=[ ref=overcolor_neg]
gegl:invert-linear
gegl:component-extract component=hsv-v
gegl:invert-linear
id=desaturate_oog_negative


### desaturate out-of-gamut RGB values > 1.0
ref=in
subtract aux=[ ref=gray ]
id=overcolor_pos

ref=in
# "input minus 1.0"
subtract aux=[ ref= gegl:color value=white]
rgb-clip clip-low=true low-limit=0.0 clip-high=false
divide aux=[ ref=overcolor_pos]
gegl:component-extract component=hsv-v
# one minus factor_positive
id=1_k_pos

gegl:color value=white
subtract aux=[ ref=1_k_pos]
id=desaturate_oog_positive


### combine desaturation factor
gegl:darken aux=[ ref=desaturate_oog_negative]
id=desaturate_oog

### render desaturation
ref=in
subtract aux=[ ref=gray]
multiply aux=[ ref=desaturate_oog ]
add aux=[ ref=gray ]

